import os

import readchar

from cli_cach_manager import CacheManager
from cli_network import NetworkClient


class Menu:
    """–ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é, —É–ø—Ä–∞–≤–ª—è—é—â–µ–µ –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–µ–ª–∫–∞–º–∏."""

    def __init__(self, title, options):
        self.title = title
        self.options = options
        self.selected = 0

    def display(self, account):
        os.system("cls")
        print(f"=== {self.title}: {account['nickname']} ===")
        for i, item in enumerate(self.options):
            prefix = "üëâ " if i == self.selected else "   "
            print(prefix + item)

    def run(self, account):
        raise NotImplementedError


class MainMenu(Menu):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞."""

    def __init__(self, network: NetworkClient, cache: CacheManager):
        super().__init__("–ú–µ–Ω—é –∏–≥—Ä–æ–∫–∞", [
            "–ë–∞–ª–∞–Ω—Å",
            "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            "–ú–∞–≥–∞–∑–∏–Ω",
            "–ö—É–ø–∏—Ç—å",
            "–ü—Ä–æ–¥–∞—Ç—å",
            "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
            "Exit",
        ])
        self.network = network
        self.cache = cache
        self.master_items = []
        self.account = None

    def set_account(self, account, master_items):
        self.account = account
        self.master_items = master_items

    def pretty_print_items(self, items):
        for it in items:
            print(f"  id:{it['id']}  {it['name']}  —Ü–µ–Ω–∞:{it['price']}")

    def handle_choice(self, choice):
        if choice == "–ë–∞–ª–∞–Ω—Å":
            self.network.send({"action": "whoami"})
            resp = self.network.recv()
            if resp and resp.get("status") == "ok":
                self.account = resp["account"]
                print("–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:", self.account["credits"])
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif choice == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
            print("–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:", self.account.get("items", []))
            if self.account.get("items"):
                owned = [it for it in self.master_items if it["id"] in self.account["items"]]
                self.pretty_print_items(owned)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif choice == "–ú–∞–≥–∞–∑–∏–Ω":
            print("–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã:")
            self.pretty_print_items(self.master_items)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif choice == "–ö—É–ø–∏—Ç—å":
            item_id = input("–í–≤–µ–¥–∏—Ç–µ id –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ")
            if item_id.isdigit():
                self.network.send({"action": "buy", "item_id": int(item_id)})
                resp = self.network.recv()
                if resp and resp.get("status") == "ok":
                    self.account = resp["account"]
                    print("–ö—É–ø–ª–µ–Ω–æ:", resp["bought"]["name"])
                    print("–û—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤:", self.account["credits"])
                else:
                    print("–û—à–∏–±–∫–∞:", resp.get("error"))
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif choice == "–ü—Ä–æ–¥–∞—Ç—å":
            item_id = input("–í–≤–µ–¥–∏—Ç–µ id –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ")
            if item_id.isdigit():
                self.network.send({"action": "sell", "item_id": int(item_id)})
                resp = self.network.recv()
                if resp and resp.get("status") == "ok":
                    self.account = resp["account"]
                    print("–ü—Ä–æ–¥–∞–Ω–æ:", resp["sold"]["name"])
                    print("–ö—Ä–µ–¥–∏—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å:", self.account["credits"])
                else:
                    print("–û—à–∏–±–∫–∞:", resp.get("error"))
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")

        elif choice == "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞":
            self.network.send({"action": "logout"})
            self.network.recv()
            print("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            return "logout"

        elif choice == "Exit":
            print("–í—ã—Ö–æ–¥ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞...")
            self.network.disconnect()
            exit(0)

    def run(self, account):
        self.account = account
        while True:
            self.display(self.account)
            key = readchar.readkey()
            if key in ('\x1b[A', readchar.key.UP):
                self.selected = (self.selected - 1) % len(self.options)
            elif key in ('\x1b[B', readchar.key.DOWN):
                self.selected = (self.selected + 1) % len(self.options)
            elif key == readchar.key.ENTER:
                choice = self.options[self.selected]
                result = self.handle_choice(choice)
                if result == "logout":
                    return None
